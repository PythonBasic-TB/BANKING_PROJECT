აპლიკაცია გაშვებისას გვთავაზობს მენიუს სადაც ჩანს ძირითადი ფუნქციონალი:

1.	create user account -
	a.	Inputs:
		•	name – user input - validation isalpha
            + validator.validate_name(name)
		•	surname – user input - validation isalpha
            + validator.validate_name(surname)
		•	balance - <100 - user input - validation isfloat
            + validator.validate_input_is_float(balance)
			IBAN – generated by a separate module. Data format (6 symbols, first two characters “TB”, last four digits, generated from “0000” ascending)

	b.	Output:
		•	Dictionary e.g. {‘TB0001’:{‘name’:’john’, ‘surname’:’Doe’, ’ balance’:’345’, ‘loan’:0, ‘interest’:8.2}}

	c.	Actions:
		•	add created dictionary to acounts database. (e.g.  accaunt_data.py)
		•	print success message and exit

	d.	errors:
		•	while validation return ‘false’, point it and request corrected input or offer the opportunity to leave the program

	e.	dependencies:
        •	validator.
            + 	validate_name
            +	validate_input_is_float
        •	accaunt_data
            +	database


2.	top up balance-
    a.	Inputs:
        - IBAN  - user input - validation check correct format and if exists in database
            + validator.validate_IBAN(IBAN)
            + validator.find_customer_with_iban(IBAN)
        - amount - user input - validation isfloat
            + validator.validate_input_is_float(amount)
    b.  Output:
		•	Dictionary e.g. {‘TB0001’:{‘name’:’john’, ‘surname’:’Doe’, ’ balance’:’345’, ‘loan’:0, ‘interest’:8.2}}
    c.  Actions:
        - Check if IBAN exists in account_data.database
        - Get account details for that IBAN from account_data.database
        - Update balance by adding amount to existing balance
        - Update account details dictionary with new balance for that IBAN
        - Save updated dictionary back to account_data.database
        - Print success message
        -----------------------------------------------------------------------------------------------------------------
        - create data for transaction history 
        - call ???_transaction module for add transaction to transaction_history database e.g. accaunt_data.transaction_history
        - when ???_transaction module return True, print success message and exit
        -----------------------------------------------------------------------------------------------------------------
    d.  errors:
        - while validation return 'false', point it and request corrected input or offer the opportunity to leave the program
    e.  dependencies:
        - validator
            + validator.validate_IBAN(IBAN)
            + validator.find_customer_with_iban(IBAN)
            + validator.validate_input_is_float(amount)
3.	check balance -